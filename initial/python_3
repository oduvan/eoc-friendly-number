def friendly_number(a, b):
    # your code here
    return None


if __name__ == '__main__':
    print("Example:")
    print(friendly_number(102, {}))

    # These "asserts" are used for self-checking and not for an auto-testing
    assert friendly_number(102, {}) == '102'
    assert friendly_number(12341234, {'decimals': 1}) == '12.3M'
    assert friendly_number(12000000, {'decimals': 3}) == '12.000M'
    assert friendly_number(102, {'decimals': 2}) == '102.00'
    assert friendly_number(10240, {}) == '10k'
    assert friendly_number(1024000000,
 {'base': 1024, 'suffix': 'iB'}) == '976MiB'
    assert friendly_number(-150,
 {'base': 100,
  'powers': ['', 'd', 'D']}) == '-1d'
    assert friendly_number(-155,
 {'base': 100,
  'decimals': 1,
  'powers': ['', 'd', 'D']}) == '-1.6d'
    assert friendly_number(255000000000,
 {'powers': ['', 'k', 'M']}) == '255000M'
    print("Coding complete? Click 'Check' to earn cool rewards!")
